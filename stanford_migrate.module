<?php

/**
 * @file
 * Contains stanford_migrate.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Installer\InstallerKernel;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\migrate\Exception\RequirementsException;
use Drupal\migrate\MigrateMessage;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Plugin\RequirementsInterface;
use Drupal\migrate_plus\Entity\Migration;
use Drupal\migrate_tools\MigrateExecutable;
use Drupal\ultimate_cron\CronJobInterface;

/**
 * Implements hook_help().
 */
function stanford_migrate_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the stanford_migrate module.
    case 'help.page.stanford_migrate':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds more functionality to migrate and migrate plus modules') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_config_schema_info_alter().
 */
function stanford_migrate_config_schema_info_alter(&$definitions) {
  $definitions['migrate_plus.migration.*']['mapping']['status'] = [
    'type' => 'boolean',
    'label' => 'Active',
  ];
}

/**
 * Migration callback to just get the current timestamp.
 *
 * We use this function in migration callback processes because using `time` as
 * the callback produces messages about "function accepts 0 arguments, 1
 * argument passed". So we just have our own callback that takes the argument
 * from the migration process and does nothing with it.
 *
 * @param mixed $arg
 *   Passed parameter from migration plugin `callback`.
 *
 * @return int
 *   Current timestamp.
 *
 * @see \Drupal\migrate\Plugin\migrate\process\Callback::transform()
 */
function _stanford_migrate_get_time($arg = NULL) {
  return time();
}

/**
 * Implements hook_entity_type_alter().
 */
function stanford_migrate_entity_type_alter(array &$entity_types) {
  if (\Drupal::moduleHandler()->moduleExists('migrate_source_csv')) {
    $entity_types['migration']->setFormClass('upload-csv', 'Drupal\stanford_migrate\Form\StanfordMigrateCsvImportForm');
    $entity_types['migration']->setLinkTemplate('upload-csv', '/admin/structure/migrate/manage/{migration_group}/migrations/{migration}/csv-upload');
  }
}

/**
 * Implements hook_migrate_source_info_alter().
 */
function stanford_migrate_migrate_source_info_alter(array &$definitions) {
  $definitions['url']['class'] = '\Drupal\stanford_migrate\Plugin\migrate\source\StanfordUrl';
}

/**
 * Implements hook_data_parser_info_alter().
 */
function stanford_migrate_data_parser_info_alter(array &$definitions) {
  $definitions['json']['class'] = '\Drupal\stanford_migrate\Plugin\migrate_plus\data_parser\StanfordJson';
  $definitions['simple_xml']['class'] = '\Drupal\stanford_migrate\Plugin\migrate_plus\data_parser\StanfordSimpleXml';
}

/**
 * Implements hook_entity_delete().
 *
 * When an entity is manually deleted from the database, we want to remove it
 * from the migration mapping.
 */
function stanford_migrate_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
  foreach (stanford_migrate_migration_list() as $group => $migrations) {
    foreach ($migrations as $migration) {
      if(is_string($migration)){
        var_dump($migration);
      }
      $destination = $migration->getDestinationConfiguration();

      // It should always be set. but its just a safety valve.
      if (!isset($destination['plugin'])) {
        continue;
      }

      if (
        strpos($destination['plugin'], 'entity:') !== FALSE ||
        strpos($destination['plugin'], 'entity_reference_revisions:') !== FALSE
      ) {
        [, $type] = explode(':', $destination['plugin']);

        if ($type == $entity->getEntityTypeId()) {
          $id_key = \Drupal::entityTypeManager()
            ->getDefinition($entity->getEntityTypeId())
            ->getKey('id');

          $migration->getIdMap()
            ->deleteDestination([$id_key => $entity->id()]);
          return;
        }
      }
    }
  }
}

/**
 * Ultimate cron callback function to execute a migration group.
 *
 * The entity id should be in the form `stanford_migrate_{migrate_group_id}` to
 * execute that group.
 *
 * @param \Drupal\ultimate_cron\CronJobInterface $cron_entity
 *   Ultimate cron entity.
 */
function stanford_migrate_ultimate_cron_task(CronJobInterface $cron_entity) {
  // Invalidate migration plugins to gather any changes to config entities
  // before running import. This allows for any changes to the source urls.
  Cache::invalidateTags(['migration_plugins']);

  $logger = \Drupal::logger('stanford_migrate');
  $migrations = stanford_migrate_migration_list();

  $migration_group = str_replace('stanford_migrate_', '', $cron_entity->id());
  // Execute the migration entities in the provided migration group.
  if ($migration_group && !empty($migrations[$migration_group])) {
    try {
      array_walk($migrations[$migration_group], 'stanford_migrate_execute_migration');
    }
    catch (Exception $e) {

      // Log any errors that we encounter.
      $logger->error('Unable to run migration importer: @group @message', [
        '@group' => $migration_group,
        '@message' => $e->getMessage(),
      ]);
    }

    return;
  }
  $logger->info('No migration group @group exists. No migration executed.', ['@group' => $migration_group]);
}

/**
 * Executes a single migration, taken from drush command in migrate_tools.
 *
 * @param \Drupal\migrate\Plugin\MigrationInterface $migration
 *   The migration to execute.
 * @param string $migration_id
 *   The migration ID (not used, just an artifact of array_walk()).
 * @param array $options
 *   Array of options to pass into the migration import.
 *
 * @see \Drupal\migrate_tools\Commands\MigrateToolsCommands::executeMigration()
 */
function stanford_migrate_execute_migration(MigrationInterface $migration, $migration_id, array $options = []) {
  // Reset migration status so that it can be executed again.
  $migration->interruptMigration(MigrationInterface::RESULT_STOPPED);
  $migration->setStatus(MigrationInterface::STATUS_IDLE);

  // Keep track of all migrations run during this command so the same
  // migration is not run multiple times.
  static $executed_migrations = [];

  // Execute all the required migrations first before running this one.
  $definition = $migration->getPluginDefinition();
  $required_migrations = $definition['migration_dependencies']['required'] ?? [];
  $required_migrations = array_filter($required_migrations, function ($value) use ($executed_migrations) {
    return !isset($executed_migrations[$value]);
  });

  if (!empty($required_migrations)) {
    $manager = \Drupal::service('plugin.manager.migration');
    $required_migrations = $manager->createInstances($required_migrations);
    $dependency_options = array_merge($options, ['is_dependency' => TRUE]);
    array_walk($required_migrations, 'stanford_migrate_execute_migration', $dependency_options);
    $executed_migrations += $required_migrations;
  }

  // Finally run this migration.
  try {
    $log = new MigrateMessage();
    $executable = new MigrateExecutable($migration, $log, $options);
    $executable->import();
    $executed_migrations[$migration_id] = $migration_id;
  }
  catch (Exception $e) {
    \Drupal::logger('stanford_migrate')
      ->critical('Unable to execute importer @id: @message', [
        '@id' => $migration_id,
        '@message' => $e->getMessage(),
      ]);
  }
}

/**
 * Retrieve a list of active migrations, partially taken from migrate_tools.
 *
 * @return \Drupal\migrate\Plugin\MigrationInterface[][]
 *   An array keyed by migration group, each value containing an array of
 *   migrations or an empty array if no migrations match the input criteria.
 *
 * @see \Drupal\migrate_tools\Commands\MigrateToolsCommands::migrationsList()
 */
function stanford_migrate_migration_list() {
  // Don't run the migrations when drupal is being installed.
  if (InstallerKernel::installationAttempted()) {
    return [];
  }

  $manager = \Drupal::service('plugin.manager.migration');
  $matched_migrations = $manager->createInstances(array_keys(Migration::loadMultiple()));

  // Do not return any migrations which fail to meet requirements.
  /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
  foreach ($matched_migrations as $id => $migration) {
    if ($migration->getSourcePlugin() instanceof RequirementsInterface) {
      // Status might not be set on the entity so check for it first.
      if (isset($migration->status) && !$migration->status) {
        continue;
      }
      try {
        $migration->getSourcePlugin()->checkRequirements();
      }
      catch (RequirementsException $e) {
        \Drupal::logger('stanford_migrate')
          ->error('Unable to execute migration @name: @message', [
            '@name' => $migration->label(),
            '@message' => $e->getMessage(),
          ]);
        unset($matched_migrations[$id]);
      }
    }
  }

  // Sort the matched migrations by group.
  if (!empty($matched_migrations)) {
    /** @var \Drupal\migrate\Plugin\Migration $migration */
    foreach ($matched_migrations as $id => $migration) {
      $definition = $migration->getPluginDefinition();
      $configured_group_id = $definition['migration_group'] ?? 'default';
      $migrations[$configured_group_id][$id] = $migration;
    }
  }
  return isset($migrations) ? $migrations : [];
}
